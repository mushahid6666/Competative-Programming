class Solution(object):
    def bfs_traverse(self, matrix, rows, cols, cur_row, cur_col, cur_distance):
        if cur_row >= 0 and cur_row < rows and cur_col >= 0 and cur_col < cols:
            if matrix[cur_row][cur_col]== -1:
                return 2147483647
            if matrix[cur_row][cur_col] == 2147483647 or matrix[cur_row][cur_col] > cur_distance:
                matrix[cur_row][cur_col] = cur_distance
                neighbours = [(0, 1), (0, -1), (1, 0), (-1, 0)]
                min_distance = 2147483647
                for cur_neighbour in neighbours:
                    distance = self.bfs_traverse(matrix, rows, cols, cur_row + cur_neighbour[0], cur_col + cur_neighbour[1], cur_distance + 1)
                    min_distance = min(min_distance, distance)
                if min_distance < cur_distance:
                    matrix[cur_row][cur_col] = min_distance
                return matrix[cur_row][cur_col] + 1
        return 2147483647



    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        rows = len(rooms)
        if rows == 0:
            return rooms
        cols = len(rooms[0])

        queue = []
        for i in range(rows):
            for j in range(cols):
                if rooms[i][j] == 0:
                    queue.append([i,j])
        neighbours = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        while len(queue) != 0:
            start_cell = queue.pop()

            for cur_neighbour in neighbours:
                self.bfs_traverse(rooms, rows, cols, start_cell[0] + cur_neighbour[0], start_cell[1] + cur_neighbour[1], 1)

        return rooms

obj = Solution()
matrix = [[2147483647,-1,0,2147483647],
          [2147483647,2147483647,2147483647,-1],
          [2147483647,-1,2147483647,-1],
          [0,-1,2147483647,2147483647]]
# matrix = [[0,2147483647,2147483647,0,-1,-1,0,0,0,-1,-1,0,               2147483647,2147483647],
#           [2147483647,-1,2147483647,-1,2147483647,0,-1,2147483647,-1,2147483647,2147483647,-1,-1,2147483647],
#           [0,0,-1,2147483647,-1,2147483647,-1,-1,2147483647,0,0,2147483647,0,2147483647],
#           [-1,0,2147483647,-1,0,0,-1,2147483647,0,2147483647,0,-1,0,-1]]

# matrix = [[0,2147483647,0,2147483647,0,2147483647,0,-1,0,2147483647,2147483647,2147483647,0,2147483647,-1,-1,-1,2147483647,2147483647,0],
#           [2147483647,2147483647,0,2147483647,0,-1,-1,2147483647,2147483647,2147483647,-1,0,-1,2147483647,2147483647,0,-1,0,-1,-1],
#           [0,-1,-1,2147483647,-1,-1,-1,2147483647,2147483647,-1,-1,0,-1,2147483647,-1,-1,0,0,-1,0],
#           [2147483647,-1,2147483647,-1,0,-1,0,2147483647,2147483647,0,-1,0,-1,-1,0,2147483647,0,0,2147483647,2147483647],
#           [0,2147483647,-1,-1,-1,0,2147483647,2147483647,0,0,-1,2147483647,2147483647,-1,0,2147483647,-1,2147483647,2147483647,2147483647],
#           [2147483647,-1,0,2147483647,2147483647,-1,0,-1,2147483647,0,-1,0,0,-1,-1,2147483647,-1,2147483647,2147483647,0],
#           [2147483647,2147483647,2147483647,0,0,2147483647,-1,0,-1,-1,-1,2147483647,2147483647,-1,2147483647,2147483647,-1,2147483647,-1,-1],
#           [0,0,0,-1,0,0,2147483647,-1,-1,0,-1,0,2147483647,-1,-1,0,0,0,0,2147483647],
#           [-1,-1,2147483647,2147483647,2147483647,0,-1,0,0,2147483647,2147483647,0,2147483647,-1,0,-1,0,0,2147483647,0],
#           [0,0,0,-1,-1,2147483647,-1,0,-1,2147483647,0,-1,-1,2147483647,-1,0,2147483647,-1,-1,-1],
#           [-1,0,2147483647,0,-1,0,0,-1,2147483647,0,-1,-1,-1,0,0,2147483647,2147483647,2147483647,0,2147483647],
#           [-1,-1,-1,0,0,-1,2147483647,2147483647,2147483647,0,-1,0,-1,0,2147483647,0,2147483647,2147483647,0,-1],
#           [0,2147483647,-1,2147483647,0,-1,-1,0,-1,2147483647,2147483647,0,-1,2147483647,0,-1,2147483647,2147483647,-1,0],
#           [0,0,0,0,-1,2147483647,2147483647,-1,2147483647,2147483647,-1,-1,-1,-1,-1,-1,2147483647,0,-1,-1],
#           [-1,-1,0,-1,-1,-1,0,-1,-1,2147483647,2147483647,2147483647,-1,2147483647,2147483647,0,0,0,-1,0],
#           [2147483647,-1,0,2147483647,-1,-1,0,2147483647,0,2147483647,2147483647,0,-1,2147483647,0,0,2147483647,2147483647,0,-1],
#           [0,-1,0,0,2147483647,2147483647,0,0,2147483647,2147483647,-1,0,-1,0,2147483647,0,0,0,2147483647,2147483647],
#           [0,-1,-1,-1,0,2147483647,-1,2147483647,-1,-1,-1,0,-1,2147483647,2147483647,-1,-1,-1,0,2147483647]]
matrix = obj.wallsAndGates(matrix)
for i in range(len(matrix)):
    print "[",
    for j in range(len(matrix[0])):
        print matrix[i][j],
    print "]#"
print "[[0,1,1,0,-1,-1,0,0,0,-1,-1,0,1,2],"
print "[1,-1,2,-1,1,0,-1,1,-1,1,1,-1,-1,2],"
print "[0,0,-1,2147483647,-1,1,-1,-1,1,0,0,1,0,1],"
print "[-1,0,1,-1,0,0,-1,1,0,1,0,-1,0,-1]]"
